// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 3 "Parser.fsy"
 open Syntax; 
# 8 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | HASH
  | MATCH
  | WITH
  | ARROW
  | BAR
  | CONS
  | LBRACK
  | RBRACK
  | AND
  | OR
  | LPAR
  | RPAR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | ELSE
  | END
  | FALSE
  | IF
  | IN
  | LET
  | NOT
  | THEN
  | TRUE
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_HASH
    | TOKEN_MATCH
    | TOKEN_WITH
    | TOKEN_ARROW
    | TOKEN_BAR
    | TOKEN_CONS
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_ELSE
    | TOKEN_END
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_LET
    | TOKEN_NOT
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_ParamExpr
    | NONTERM_ArgExpr
    | NONTERM_MatchExpr
    | NONTERM_TupleExpr
    | NONTERM_ListExpr
    | NONTERM_ListEmpty
    | NONTERM_ListBody
    | NONTERM_TupleBody
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | HASH  -> 2 
  | MATCH  -> 3 
  | WITH  -> 4 
  | ARROW  -> 5 
  | BAR  -> 6 
  | CONS  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | AND  -> 10 
  | OR  -> 11 
  | LPAR  -> 12 
  | RPAR  -> 13 
  | EQ  -> 14 
  | NE  -> 15 
  | GT  -> 16 
  | LT  -> 17 
  | GE  -> 18 
  | LE  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | MOD  -> 24 
  | ELSE  -> 25 
  | END  -> 26 
  | FALSE  -> 27 
  | IF  -> 28 
  | IN  -> 29 
  | LET  -> 30 
  | NOT  -> 31 
  | THEN  -> 32 
  | TRUE  -> 33 
  | CSTBOOL _ -> 34 
  | NAME _ -> 35 
  | CSTINT _ -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_HASH 
  | 3 -> TOKEN_MATCH 
  | 4 -> TOKEN_WITH 
  | 5 -> TOKEN_ARROW 
  | 6 -> TOKEN_BAR 
  | 7 -> TOKEN_CONS 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_AND 
  | 11 -> TOKEN_OR 
  | 12 -> TOKEN_LPAR 
  | 13 -> TOKEN_RPAR 
  | 14 -> TOKEN_EQ 
  | 15 -> TOKEN_NE 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_GE 
  | 19 -> TOKEN_LE 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_MOD 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_END 
  | 27 -> TOKEN_FALSE 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_IN 
  | 30 -> TOKEN_LET 
  | 31 -> TOKEN_NOT 
  | 32 -> TOKEN_THEN 
  | 33 -> TOKEN_TRUE 
  | 34 -> TOKEN_CSTBOOL 
  | 35 -> TOKEN_NAME 
  | 36 -> TOKEN_CSTINT 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Expr 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_AtExpr 
    | 20 -> NONTERM_AtExpr 
    | 21 -> NONTERM_AtExpr 
    | 22 -> NONTERM_AtExpr 
    | 23 -> NONTERM_AtExpr 
    | 24 -> NONTERM_AtExpr 
    | 25 -> NONTERM_AtExpr 
    | 26 -> NONTERM_AtExpr 
    | 27 -> NONTERM_AtExpr 
    | 28 -> NONTERM_AppExpr 
    | 29 -> NONTERM_AppExpr 
    | 30 -> NONTERM_ParamExpr 
    | 31 -> NONTERM_ParamExpr 
    | 32 -> NONTERM_ArgExpr 
    | 33 -> NONTERM_ArgExpr 
    | 34 -> NONTERM_MatchExpr 
    | 35 -> NONTERM_TupleExpr 
    | 36 -> NONTERM_ListExpr 
    | 37 -> NONTERM_ListExpr 
    | 38 -> NONTERM_ListEmpty 
    | 39 -> NONTERM_ListBody 
    | 40 -> NONTERM_ListBody 
    | 41 -> NONTERM_TupleBody 
    | 42 -> NONTERM_TupleBody 
    | 43 -> NONTERM_Const 
    | 44 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | HASH  -> "HASH" 
  | MATCH  -> "MATCH" 
  | WITH  -> "WITH" 
  | ARROW  -> "ARROW" 
  | BAR  -> "BAR" 
  | CONS  -> "CONS" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | ELSE  -> "ELSE" 
  | END  -> "END" 
  | FALSE  -> "FALSE" 
  | IF  -> "IF" 
  | IN  -> "IN" 
  | LET  -> "LET" 
  | NOT  -> "NOT" 
  | THEN  -> "THEN" 
  | TRUE  -> "TRUE" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 29us; 65535us; 0us; 2us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 37us; 14us; 38us; 15us; 39us; 16us; 40us; 17us; 41us; 18us; 42us; 19us; 43us; 20us; 44us; 21us; 45us; 22us; 46us; 23us; 47us; 24us; 48us; 25us; 49us; 26us; 57us; 27us; 58us; 28us; 61us; 29us; 62us; 30us; 64us; 31us; 75us; 32us; 78us; 33us; 83us; 34us; 87us; 35us; 92us; 35us; 94us; 36us; 33us; 65535us; 0us; 4us; 4us; 71us; 5us; 71us; 6us; 4us; 8us; 4us; 10us; 4us; 12us; 4us; 37us; 4us; 38us; 4us; 39us; 4us; 40us; 4us; 41us; 4us; 42us; 4us; 43us; 4us; 44us; 4us; 45us; 4us; 46us; 4us; 47us; 4us; 48us; 4us; 49us; 4us; 57us; 4us; 58us; 4us; 61us; 4us; 62us; 4us; 64us; 4us; 67us; 68us; 71us; 71us; 75us; 4us; 78us; 4us; 83us; 4us; 87us; 4us; 92us; 4us; 94us; 4us; 29us; 65535us; 0us; 5us; 6us; 5us; 8us; 5us; 10us; 5us; 12us; 5us; 37us; 5us; 38us; 5us; 39us; 5us; 40us; 5us; 41us; 5us; 42us; 5us; 43us; 5us; 44us; 5us; 45us; 5us; 46us; 5us; 47us; 5us; 48us; 5us; 49us; 5us; 57us; 5us; 58us; 5us; 61us; 5us; 62us; 5us; 64us; 5us; 75us; 5us; 78us; 5us; 83us; 5us; 87us; 5us; 92us; 5us; 94us; 5us; 3us; 65535us; 4us; 69us; 5us; 70us; 71us; 72us; 2us; 65535us; 56us; 60us; 73us; 74us; 33us; 65535us; 0us; 53us; 4us; 53us; 5us; 53us; 6us; 53us; 8us; 53us; 10us; 53us; 12us; 53us; 37us; 53us; 38us; 53us; 39us; 53us; 40us; 53us; 41us; 53us; 42us; 53us; 43us; 53us; 44us; 53us; 45us; 53us; 46us; 53us; 47us; 53us; 48us; 53us; 49us; 53us; 57us; 53us; 58us; 53us; 61us; 53us; 62us; 53us; 64us; 53us; 67us; 53us; 71us; 53us; 75us; 53us; 78us; 53us; 83us; 53us; 87us; 53us; 92us; 53us; 94us; 53us; 33us; 65535us; 0us; 51us; 4us; 51us; 5us; 51us; 6us; 51us; 8us; 51us; 10us; 51us; 12us; 51us; 37us; 51us; 38us; 51us; 39us; 51us; 40us; 51us; 41us; 51us; 42us; 51us; 43us; 51us; 44us; 51us; 45us; 51us; 46us; 51us; 47us; 51us; 48us; 51us; 49us; 51us; 57us; 51us; 58us; 51us; 61us; 51us; 62us; 51us; 64us; 51us; 67us; 51us; 71us; 51us; 75us; 51us; 78us; 51us; 83us; 51us; 87us; 51us; 92us; 51us; 94us; 51us; 33us; 65535us; 0us; 52us; 4us; 52us; 5us; 52us; 6us; 52us; 8us; 52us; 10us; 52us; 12us; 52us; 37us; 52us; 38us; 52us; 39us; 52us; 40us; 52us; 41us; 52us; 42us; 52us; 43us; 52us; 44us; 52us; 45us; 52us; 46us; 52us; 47us; 52us; 48us; 52us; 49us; 52us; 57us; 52us; 58us; 52us; 61us; 52us; 62us; 52us; 64us; 52us; 67us; 52us; 71us; 52us; 75us; 52us; 78us; 52us; 83us; 52us; 87us; 52us; 92us; 52us; 94us; 52us; 34us; 65535us; 0us; 86us; 4us; 86us; 5us; 86us; 6us; 86us; 8us; 86us; 10us; 86us; 12us; 86us; 37us; 86us; 38us; 86us; 39us; 86us; 40us; 86us; 41us; 86us; 42us; 86us; 43us; 86us; 44us; 86us; 45us; 86us; 46us; 86us; 47us; 86us; 48us; 86us; 49us; 86us; 57us; 86us; 58us; 86us; 61us; 86us; 62us; 86us; 64us; 86us; 67us; 86us; 71us; 86us; 75us; 86us; 76us; 77us; 78us; 86us; 83us; 86us; 87us; 86us; 92us; 86us; 94us; 86us; 2us; 65535us; 87us; 88us; 92us; 93us; 2us; 65535us; 64us; 84us; 94us; 95us; 33us; 65535us; 0us; 50us; 4us; 50us; 5us; 50us; 6us; 50us; 8us; 50us; 10us; 50us; 12us; 50us; 37us; 50us; 38us; 50us; 39us; 50us; 40us; 50us; 41us; 50us; 42us; 50us; 43us; 50us; 44us; 50us; 45us; 50us; 46us; 50us; 47us; 50us; 48us; 50us; 49us; 50us; 57us; 50us; 58us; 50us; 61us; 50us; 62us; 50us; 64us; 50us; 67us; 50us; 71us; 50us; 75us; 50us; 78us; 50us; 83us; 50us; 87us; 50us; 92us; 50us; 94us; 50us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 33us; 67us; 97us; 101us; 104us; 138us; 172us; 206us; 241us; 244us; 247us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 14us; 1us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 1us; 2us; 2us; 28us; 2us; 3us; 29us; 1us; 4us; 14us; 4us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 4us; 14us; 4us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 4us; 14us; 4us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 1us; 5us; 14us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 14us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 16us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 24us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 24us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 25us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 25us; 16us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 26us; 41us; 42us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 34us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 34us; 14us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 34us; 15us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 39us; 40us; 16us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 41us; 41us; 42us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 2us; 24us; 25us; 2us; 24us; 25us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 2us; 26us; 35us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 2us; 30us; 31us; 1us; 31us; 2us; 32us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 2us; 37us; 38us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 40us; 1us; 40us; 2us; 41us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 19us; 21us; 24us; 27us; 29us; 44us; 46us; 61us; 63us; 78us; 80us; 95us; 110us; 125us; 140us; 155us; 170us; 185us; 200us; 215us; 230us; 245us; 260us; 275us; 290us; 305us; 320us; 335us; 350us; 367us; 382us; 397us; 412us; 428us; 445us; 447us; 449us; 451us; 453us; 455us; 457us; 459us; 461us; 463us; 465us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 484us; 487us; 489us; 491us; 493us; 495us; 497us; 499us; 501us; 504us; 506us; 508us; 510us; 512us; 514us; 516us; 519us; 521us; 524us; 526us; 528us; 530us; 532us; 534us; 536us; 538us; 540us; 542us; 544us; 546us; 548us; 550us; 553us; 555us; 557us; 559us; 561us; 563us; 565us; 568us; 570us; 572us; |]
let _fsyacc_action_rows = 98
let _fsyacc_actionTableElements = [|10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 49152us; 14us; 32768us; 0us; 3us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 0us; 16385us; 8us; 16386us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 8us; 16387us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 14us; 32768us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 32us; 8us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 14us; 32768us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 25us; 10us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 13us; 16388us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 3us; 16389us; 22us; 39us; 23us; 40us; 24us; 41us; 3us; 16390us; 22us; 39us; 23us; 40us; 24us; 41us; 3us; 16391us; 22us; 39us; 23us; 40us; 24us; 41us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 11us; 16395us; 10us; 48us; 11us; 49us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 11us; 16396us; 10us; 48us; 11us; 49us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 9us; 16397us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 9us; 16398us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 9us; 16399us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 9us; 16400us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 9us; 16401us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 9us; 16402us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 14us; 32768us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 29us; 58us; 14us; 32768us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 26us; 59us; 14us; 32768us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 29us; 62us; 14us; 32768us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 26us; 63us; 15us; 32768us; 1us; 94us; 10us; 48us; 11us; 49us; 13us; 65us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 14us; 32768us; 4us; 76us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 14us; 32768us; 6us; 79us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 13us; 16418us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 14us; 16423us; 1us; 92us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 14us; 16425us; 1us; 94us; 10us; 48us; 11us; 49us; 14us; 42us; 15us; 43us; 16us; 44us; 17us; 45us; 18us; 46us; 19us; 47us; 20us; 37us; 21us; 38us; 22us; 39us; 23us; 40us; 24us; 41us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 1us; 32768us; 35us; 56us; 2us; 32768us; 14us; 57us; 35us; 73us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16408us; 1us; 32768us; 14us; 61us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16409us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16410us; 1us; 32768us; 36us; 67us; 8us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 8us; 16414us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16415us; 1us; 16416us; 35us; 73us; 0us; 16417us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 1us; 32768us; 8us; 90us; 1us; 32768us; 5us; 78us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 1us; 32768us; 35us; 80us; 1us; 32768us; 7us; 81us; 1us; 32768us; 35us; 82us; 1us; 32768us; 5us; 83us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 1us; 32768us; 13us; 85us; 0us; 16419us; 0us; 16420us; 11us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 9us; 91us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 1us; 32768us; 9us; 89us; 0us; 16421us; 1us; 32768us; 9us; 91us; 0us; 16422us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16424us; 10us; 32768us; 2us; 66us; 3us; 75us; 8us; 87us; 12us; 64us; 21us; 12us; 28us; 6us; 30us; 55us; 34us; 97us; 35us; 54us; 36us; 96us; 0us; 16426us; 0us; 16427us; 0us; 16428us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 27us; 28us; 37us; 46us; 57us; 72us; 83us; 98us; 109us; 123us; 134us; 138us; 142us; 146us; 147us; 148us; 149us; 161us; 173us; 183us; 193us; 203us; 213us; 223us; 233us; 248us; 263us; 278us; 293us; 309us; 324us; 339us; 353us; 368us; 383us; 394us; 405us; 416us; 427us; 438us; 449us; 460us; 471us; 482us; 493us; 504us; 515us; 526us; 527us; 528us; 529us; 530us; 531us; 533us; 536us; 547us; 558us; 559us; 561us; 572us; 583us; 584us; 595us; 596us; 598us; 607us; 608us; 609us; 610us; 619us; 620us; 622us; 623us; 634us; 636us; 638us; 649us; 651us; 653us; 655us; 657us; 668us; 670us; 671us; 672us; 684us; 686us; 687us; 689us; 690us; 701us; 702us; 713us; 714us; 715us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 6us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 7us; 8us; 3us; 3us; 2us; 2us; 1us; 2us; 1us; 2us; 12us; 3us; 1us; 3us; 2us; 1us; 3us; 3us; 3us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 65535us; 16411us; 16412us; 16413us; 65535us; 16415us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16419us; 16420us; 65535us; 65535us; 16421us; 65535us; 16422us; 65535us; 16424us; 65535us; 16426us; 16427us; 16428us; |]
let _fsyacc_reductions ()  =    [| 
# 336 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 345 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                                 _1                     
                   )
# 41 "Parser.fsy"
                 : Syntax.expr));
# 356 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                 _1                     
                   )
# 45 "Parser.fsy"
                 : Syntax.expr));
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                _1                     
                   )
# 46 "Parser.fsy"
                 : Syntax.expr));
# 378 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                If(_2, _4, _6)         
                   )
# 47 "Parser.fsy"
                 : Syntax.expr));
# 391 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                Prim("-", CstI 0, _2)  
                   )
# 48 "Parser.fsy"
                 : Syntax.expr));
# 402 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                Prim("+",  _1, _3)     
                   )
# 49 "Parser.fsy"
                 : Syntax.expr));
# 414 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                Prim("-",  _1, _3)     
                   )
# 50 "Parser.fsy"
                 : Syntax.expr));
# 426 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                Prim("*",  _1, _3)     
                   )
# 51 "Parser.fsy"
                 : Syntax.expr));
# 438 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                Prim("/",  _1, _3)     
                   )
# 52 "Parser.fsy"
                 : Syntax.expr));
# 450 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                Prim("%",  _1, _3)     
                   )
# 53 "Parser.fsy"
                 : Syntax.expr));
# 462 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                Prim("=",  _1, _3)     
                   )
# 54 "Parser.fsy"
                 : Syntax.expr));
# 474 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                Prim("<>", _1, _3)     
                   )
# 55 "Parser.fsy"
                 : Syntax.expr));
# 486 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                Prim(">",  _1, _3)     
                   )
# 56 "Parser.fsy"
                 : Syntax.expr));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                Prim("<",  _1, _3)     
                   )
# 57 "Parser.fsy"
                 : Syntax.expr));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                                Prim(">=", _1, _3)     
                   )
# 58 "Parser.fsy"
                 : Syntax.expr));
# 522 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                Prim("<=", _1, _3)     
                   )
# 59 "Parser.fsy"
                 : Syntax.expr));
# 534 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                 If(_1, _3, CstB(false))
                   )
# 60 "Parser.fsy"
                 : Syntax.expr));
# 546 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                                 If(_1, CstB(true), _3) 
                   )
# 61 "Parser.fsy"
                 : Syntax.expr));
# 558 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                    _1                     
                   )
# 65 "Parser.fsy"
                 : Syntax.expr));
# 569 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                    _1                     
                   )
# 66 "Parser.fsy"
                 : Syntax.expr));
# 580 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                    _1                     
                   )
# 67 "Parser.fsy"
                 : Syntax.expr));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                    _1                     
                   )
# 68 "Parser.fsy"
                 : Syntax.expr));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                                   Var _1                 
                   )
# 69 "Parser.fsy"
                 : Syntax.expr));
# 613 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                                   Let(_2, _4, _6)        
                   )
# 70 "Parser.fsy"
                 : Syntax.expr));
# 626 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                   Letfun(_2, _3, _5, _7) 
                   )
# 71 "Parser.fsy"
                 : Syntax.expr));
# 640 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                                   _2                     
                   )
# 72 "Parser.fsy"
                 : Syntax.expr));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                                    Sel(_2, _3)            
                   )
# 73 "Parser.fsy"
                 : Syntax.expr));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                                   Call(_1, _2)           
                   )
# 77 "Parser.fsy"
                 : Syntax.expr));
# 675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                                  Call(_1, _2)           
                   )
# 78 "Parser.fsy"
                 : Syntax.expr));
# 687 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                   [_1]                   
                   )
# 82 "Parser.fsy"
                 : Syntax.expr list));
# 698 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                                                   _1 :: _2               
                   )
# 83 "Parser.fsy"
                 : Syntax.expr list));
# 710 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                 [_1]                   
                   )
# 87 "Parser.fsy"
                 : string list));
# 721 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                 _1 :: _2               
                   )
# 88 "Parser.fsy"
                 : string list));
# 733 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                               Match(_2, _6, (_8, _10, _12)) 
                   )
# 93 "Parser.fsy"
                 : Syntax.expr));
# 749 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                 Tup(_2)                
                   )
# 97 "Parser.fsy"
                 : Syntax.expr));
# 760 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                                 _1                     
                   )
# 101 "Parser.fsy"
                 : Syntax.expr));
# 771 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                                 _2                     
                   )
# 102 "Parser.fsy"
                 : Syntax.expr));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                                 CstN                   
                   )
# 106 "Parser.fsy"
                 : Syntax.expr));
# 792 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                                 ConC(_1, CstN)         
                   )
# 110 "Parser.fsy"
                 : Syntax.expr));
# 803 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                 ConC(_1, _3)           
                   )
# 111 "Parser.fsy"
                 : Syntax.expr));
# 815 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                 [_1; _3]               
                   )
# 115 "Parser.fsy"
                 : Syntax.expr list));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.expr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                                 _1 :: _3               
                   )
# 116 "Parser.fsy"
                 : Syntax.expr list));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                 CstI(_1)               
                   )
# 120 "Parser.fsy"
                 : Syntax.expr));
# 850 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                 CstB(_1)               
                   )
# 121 "Parser.fsy"
                 : Syntax.expr));
|]
# 862 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Syntax.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
