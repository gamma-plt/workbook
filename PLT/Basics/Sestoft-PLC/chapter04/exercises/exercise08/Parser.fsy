// fsyacc --module Parser Parser.fsy

%{ open Syntax; %}

%token <int> CSTINT
%token <string> NAME
%token <bool> CSTBOOL

%token ELSE END FALSE IF IN LET NOT THEN TRUE
%token PLUS MINUS TIMES DIV MOD
%token EQ NE GT LT GE LE
%token LPAR RPAR 
%token AND OR
%token LBRACK RBRACK 
%token MATCH WITH ARROW BAR CONS
%token COMMA HASH
%token EOF

%left ELSE              /* lowest precedence  */
%left EQ NE 
%left AND OR
%nonassoc GT LT GE LE
%left PLUS MINUS
%left TIMES DIV MOD 
%nonassoc NOT           /* highest precedence  */

%start Main
%type <Syntax.expr> Main Expr AtExpr Const TupleExpr
%type <Syntax.expr> AppExpr
%type <Syntax.expr> ListBody
%type <Syntax.expr> ListExpr
%type <Syntax.expr> ListEmpty
%type <Syntax.expr> MatchExpr
%type <string list> ArgExpr
%type <Syntax.expr list> TupleBody
%type <Syntax.expr list> ParamExpr

%%

Main:
    Expr EOF                              { $1                     }
;

Expr:
    AtExpr                                { $1                     }
  	| AppExpr                             { $1                     }
  	| IF Expr THEN Expr ELSE Expr         { If($2, $4, $6)         }
  	| MINUS Expr                          { Prim("-", CstI 0, $2)  }
  	| Expr PLUS  Expr                     { Prim("+",  $1, $3)     }
  	| Expr MINUS Expr                     { Prim("-",  $1, $3)     }
  	| Expr TIMES Expr                     { Prim("*",  $1, $3)     }
  	| Expr DIV   Expr                     { Prim("/",  $1, $3)     } 
  	| Expr MOD   Expr                     { Prim("%",  $1, $3)     }
  	| Expr EQ    Expr                     { Prim("=",  $1, $3)     }
  	| Expr NE    Expr                     { Prim("<>", $1, $3)     }
  	| Expr GT    Expr                     { Prim(">",  $1, $3)     }
  	| Expr LT    Expr                     { Prim("<",  $1, $3)     }
  	| Expr GE    Expr                     { Prim(">=", $1, $3)     }
  	| Expr LE    Expr                     { Prim("<=", $1, $3)     }
    | Expr AND   Expr                     { If($1, $3, CstB(false))}
    | Expr OR    Expr                     { If($1, CstB(true), $3) }
;

AtExpr:
    Const                                    { $1                     }
    | TupleExpr                              { $1                     }
    | ListExpr                               { $1                     }
    | MatchExpr                              { $1                     }
  	| NAME                                   { Var $1                 }
  	| LET NAME EQ Expr IN Expr END           { Let($2, $4, $6)        }
  	| LET NAME ArgExpr EQ Expr IN Expr END   { Letfun($2, $3, $5, $7) }
  	| LPAR Expr RPAR                         { $2                     }
    | HASH CSTINT AtExpr                     { Sel($2, $3)            }
;

AppExpr:
    AtExpr ParamExpr                        { Call($1, $2)           }
  	| AppExpr ParamExpr                     { Call($1, $2)           }
;

ParamExpr:
    AtExpr                                  { [$1]                   }
    | AtExpr ParamExpr                      { $1 :: $2               }
;

ArgExpr:
    NAME                                  { [$1]                   }
    | NAME ArgExpr                        { $1 :: $2               } 
;

MatchExpr:
    MATCH Expr WITH ListEmpty ARROW Expr BAR NAME CONS NAME ARROW Expr 
        { Match($2, $6, ($8, $10, $12)) }
;

TupleExpr:
    LPAR TupleBody RPAR                   { Tup($2)                }
;

ListExpr:
    ListEmpty                             { $1                     }
    | LBRACK ListBody RBRACK              { $2                     }
;

ListEmpty:
    LBRACK RBRACK                         { CstN                   }
;                      

ListBody:
    Expr                                  { ConC($1, CstN)         }
    | Expr COMMA ListBody                 { ConC($1, $3)           } 
;

TupleBody:
    Expr COMMA Expr                       { [$1; $3]               }
    | Expr COMMA TupleBody                { $1 :: $3               } 
; 

Const:
    CSTINT                                { CstI($1)               }
  | CSTBOOL                               { CstB($1)               }
;
