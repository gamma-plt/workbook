// fsyacc --module Parser Parser.fsy

%{ open Syntax %}

%token <int> CONSTR_INT
%token <string> NAME
%token PLUS MINUS TIMES EQUAL
%token END IN LET
%token LPAR RPAR
%token EOF

%left MINUS PLUS
%left TIMES

%start Main
%type <Syntax.Expr> Main
%%

Main:
	Expr EOF	{$1}

Expr:
	NAME								{ Variable $1 }
	| CONSTR_INT 						{ ConstrInt $1 }
	| MINUS CONSTR_INT 					{ ConstrInt (- $2) }
	| LPAR Expr RPAR 					{ $2 }
	| LET NAME EQUAL Expr IN Expr END 	{ Let($2, $4, $6) }
	| Expr TIMES Expr					{ Primitive("*", $1, $3) }
	| Expr PLUS Expr					{ Primitive("+", $1, $3) }
	| Expr MINUS Expr					{ Primitive("-", $1, $3) } 